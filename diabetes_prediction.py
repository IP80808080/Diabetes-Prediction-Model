# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ysA-y2lWWPs2D-fnZ45PHm6Zzs1iB6Ph

#Importing Libraries
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""#Collect and Analyse Data from Dataset"""

db = pd.read_csv("/content/sd/db.csv")

"""##Read First 10 Data"""

db.head(10)

db.shape

db.describe()

db['Outcome'].value_counts()   # here 0: non-diabetic and 1: diabetic

db.groupby('Outcome').mean()

#seperating the data and label
X = db.drop(columns = "Outcome", axis=1)
Y = db['Outcome']

print(X)

print(Y)

"""#Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = db['Outcome']

print(X)
print(Y)

"""#Train Test_split

"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train, Y_train)

"""#Model Evaluation"""

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

"""#Testing"""

input_data = (5,120,72,19,175,25.8,0.587,30)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

